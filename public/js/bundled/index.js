var e=require("axios"),t=require("mapbox-gl");function a(e){return e&&e.__esModule?e.default:e}const s=()=>{document.querySelector(".alert")&&document.querySelector(".alert").remove()},r=(e,t)=>{s();const a=`<div class="alert alert--${e}">${t}</div>`;document.querySelector("body").insertAdjacentHTML("afterbegin",a),window.setTimeout(s,3e3)},o=async(t,s)=>{try{"success"===(await a(e)({method:"POST",url:"/api/v1/users/login",data:{email:t,password:s}})).data.status&&(r("success","Logged in successfully"),window.setTimeout((()=>{location.assign("/")}),1e3))}catch(e){r("error",e.response.data.message)}},n=async t=>{try{"success"===(await a(e)({method:"POST",url:"/api/v1/users/signup",data:t})).data.status&&(r("success",`Welcome to Natours, ${t.username}`),setTimeout((()=>{location.assign("/")}),1500))}catch(e){r("error",e.response.data.message)}},d=e=>{a(t).accessToken="pk.eyJ1IjoiYW1kZXYtaXQiLCJhIjoiY2xkOHA3cjRkMDE2ejN1b2ZiMTVyMzlvNiJ9.el2aRA6m_FAPWIJZQpS2Iw";var s=new(a(t).Map)({container:"map",style:"mapbox://styles/mapbox/streets-v11"});const r=new(a(t).LngLatBounds);e.forEach((e=>{const o=document.createElement("div");o.className="marker",new(a(t).Marker)({element:o,anchor:"bottom"}).setLngLat(e.coordinates).addTo(s),new(a(t).Popup)({offset:30}).setLngLat(e.coordinates).setHTML(`<p>Day ${e.day}: ${e.description}`).addTo(s),r.extend(e.coordinates)})),s.fitBounds(r,{padding:{top:200,bottom:150,right:100,left:100}})},c=async(t,s)=>{try{const o="data"===t?"/api/v1/users/update-me/":"/api/v1/users/update-password/";"success"===(await a(e)({method:"PATCH",url:o,data:s})).data.status&&("data"===t?r("success","Account updated"):"password"===t&&r("success","Password updated"))}catch(e){r("error",e)}},i=async(t,s)=>{try{const r=new Date(s),o=r.getFullYear(),n=r.getMonth()+1,d=r.getDate(),c=Stripe("pk_test_51MUpXcGNQpU4yYkjhZt3IFrJfOkFQysKJpIFH9qfAE1qfpzKXa9Lcui39gIm6wUtSFJPDgqXzTPnnRorfGVlbp4V00LS0o77pN"),i=await a(e)(`/api/v1/bookings/checkout/${t}/date/${o}-${n}-${d}`);void 0!==i.data.session?await c.redirectToCheckout({sessionId:i.data.session.id}):window.location.href="/"}catch(e){r("error",e)}};class l{constructor(e){this.id=void 0!==e?e:""}async createEl(t,s){try{await a(e)({method:"POST",url:`/api/v1/${t}/`,data:s}),r("success","Element created successfully.")}catch(e){r("error","Error occurred while creating this element")}}async editEl(t,s){try{await a(e)({method:"PATCH",url:`/api/v1/${t}/${this.id}`,data:s}),r("success","Element edited successfully.")}catch(e){r("error","Error occurred while editing this element")}}async deleteEl(t){try{await a(e)({method:"DELETE",url:`/api/v1/${t}/${this.id}`}),r("success","Element deleted successfully.")}catch(e){r("error","Error occurred while deleting this element")}}}const u=async(t,s,o)=>{try{await a(e)({method:"POST",url:"/api/v1/reviews",data:{review:o,rating:s,tour:t}}),r("success","Review saved successfully!"),window.location.href="/"}catch(e){r("error",`Error, ${e}`)}},m=async(t,s,o)=>{try{await a(e)({method:"PATCH",url:`/api/v1/reviews/${t}`,data:{review:o,rating:s}}),r("success","Review edited successfully!")}catch(e){r("error",`Error, ${e}`)}},p=async(t,s,o)=>{try{await a(e)({method:"PATCH",url:"/api/v1/users/toggle-bookmark",data:{tourId:t}}),s?(r("success","Tour removed from bookmarks."),o.target.classList.remove("bookmarked")):(r("success","Tour added to bookmarks."),o.target.classList.add("bookmarked"))}catch(e){r("error",`Error, ${e}`)}},v=document.querySelector(".nav__el--logout"),g=document.querySelector(".login-form .form"),y=document.querySelector(".signup-form .form"),w=document.getElementById("map"),f=document.querySelector(".form-user-data"),E=document.querySelector(".form-user-settings"),_=document.getElementById("book-tour"),b=document.getElementById("create-tour"),h=document.getElementById("edit-tour"),I=document.getElementById("create-user"),L=document.getElementById("edit-user"),k=document.getElementsByClassName("delete-el"),B=document.querySelector(".stars-wrap"),D=document.querySelector(".bookmark");if(v&&v.addEventListener("click",(async()=>{try{"success"===(await a(e)({method:"GET",url:"/api/v1/users/logout"})).data.status&&location.reload(!0)}catch(e){r("error",e.response.data.message)}})),g&&g.addEventListener("submit",(e=>{e.preventDefault();const t=document.getElementById("email").value,a=document.getElementById("password").value;o(t,a)})),y&&y.addEventListener("submit",(e=>{e.preventDefault();const t=document.getElementById("username").value,a=document.getElementById("email").value,s=document.getElementById("password").value,r=document.getElementById("password-confirm").value;n({username:t,email:a,password:s,passwordConfirm:r})})),f&&f.addEventListener("submit",(e=>{e.preventDefault();const t=new FormData;t.append("username",document.getElementById("username").value),t.append("email",document.getElementById("email").value),t.append("photo",document.getElementById("photo").files[0]),c("data",t)})),E&&E.addEventListener("submit",(async e=>{e.preventDefault(),document.querySelector(".btn--save-password").textContent="Updating...";const t=document.getElementById("password-current").value,a=document.getElementById("password").value,s=document.getElementById("password-confirm").value;await c("password",{oldPassword:t,newPassword:a,newPasswordConfirm:s}),document.getElementById("password-current").value="",document.getElementById("password").value="",document.getElementById("password-confirm").value="",document.querySelector(".btn--save-password").textContent="Save password"})),_&&_.addEventListener("click",(e=>{e.target.textContent="Processing...";const{tourId:t}=e.target.dataset,a=document.getElementById("tour-dates"),s=a.options[a.selectedIndex].value;i(t,s)})),w){d(JSON.parse(w.dataset.locations))}if(b){let e=0;document.getElementById("add-date").addEventListener("click",(t=>{t.preventDefault();t.target.insertAdjacentHTML("beforebegin",'<input class="form__input" id="duration" type="date" name="dates">'),e++,2===e&&t.target.remove()}));let t=0;document.getElementById("add-location").addEventListener("click",(e=>{e.preventDefault();e.target.insertAdjacentHTML("beforebegin",'<div class="form__group"><label class="form__label" for="longitude">Longitude </label><input class="form__input" id="longitude" type="number" name="longitude" step="0.000001"></div><div class="form__group"><label class="form__label" for="latitude">Latitude </label><input class="form__input" id="latitude" type="number" name="latitude" step="0.000001"></div><div class="form__group"><label class="form__label" for="address">Address </label><input class="form__input" id="address" type="text" name="address"></div><div class="form__group"><label class="form__label" for="locationDescription">Description </label><input class="form__input" id="description" type="text" name="locationDescription"></div><div class="form__group"><label class="form__label" for="days">Days </label><input class="form__input" id="days" type="number" name="days"></div>'),t++,2===t&&e.target.remove()})),b.addEventListener("submit",(async e=>{e.preventDefault();const t=new FormData(b),a={type:"Point",address:t.get("start-address"),description:t.get("start-locationDescription")};t.append("startLocation.coordinates.0",t.get("start-longitude")),t.append("startLocation.coordinates.1",t.get("start-latitude")),Object.keys(a).forEach((e=>{t.append(`startLocation.${e}`,a[e])}));t.getAll("dates").forEach((e=>{const a={date:e};t.append("startDates[]",JSON.stringify(a))}));const s=t.getAll("longitude"),r=t.getAll("latitude"),o=t.getAll("address"),n=t.getAll("locationDescription"),d=t.getAll("days");s.forEach(((e,a)=>{const s={type:"Point",coordinates:[e,r[a]],address:o[a],description:n[a],days:Number.parseInt(d[a])};t.append("locations[]",JSON.stringify(s))}));const c=new l;await c.createEl("tours",t)}))}if(h&&h.addEventListener("submit",(async e=>{e.preventDefault();const t=document.getElementById("edit-submit").dataset.tourId,a=new FormData(h),s={type:"Point",address:a.get("address"),description:a.get("locationDescription")};a.append("startLocation.coordinates.0",a.get("start-longitude")),a.append("startLocation.coordinates.1",a.get("start-latitude")),Object.keys(s).forEach((e=>{a.append(`startLocation.${e}`,s[e])}));const r=a.getAll("guide");for(let e of r)a.append("guides[]",e);const o=new l;await o.editEl("tours",a,t)})),I&&I.addEventListener("submit",(async e=>{e.preventDefault();let t={};const a=new FormData(I);for(const e of a.entries())t[e[0]]=e[1];const s=new l;await s.createEl("users",t)})),L&&L.addEventListener("submit",(async e=>{e.preventDefault();const t=document.getElementById("edit-submit").dataset.userId,a=new FormData(L),s=new l;await s.editEl("users",a,t)})),k)for(let e=0;e<k.length;e++)k[e].addEventListener("click",(async t=>{t.preventDefault();const a=k[e].dataset.elId,s=k[e].dataset.elPath,r=new l(a);await r.deleteEl(s),k[e].closest(".card").remove()}));if(B){const e=(e,t,a)=>{e.classList.remove(t),e.classList.add(a)},t=(t,a)=>{const s=t.querySelector(".reviews__star");if(e(s,"reviews__star--inactive",a),t.dataset.review>1)for(let s=t.dataset.review;s>0;s--){const t=document.querySelector(`[data-review='${s}']`).querySelector(".reviews__star");e(t,"reviews__star--inactive",a)}},a=document.getElementsByClassName("star");Array.from(a).forEach((function(a){a.addEventListener("mouseenter",(e=>{t(a,"reviews__star--active")})),a.addEventListener("mouseleave",(t=>{const a=document.getElementsByClassName("reviews__star");Array.from(a).forEach((function(t){t.classList.contains("reviews__star--active-clicked")||e(t,"reviews__star--active","reviews__star--inactive")}))})),a.addEventListener("click",(function(e){t(a,"reviews__star--active-clicked"),document.getElementById("review-rating").value=e.target.closest("[data-review]").dataset.review}))})),document.querySelector(".review-form").addEventListener("submit",(e=>{e.preventDefault();const t=document.getElementById("review-rating").value,a=document.getElementById("review-text").value;if(e.target.classList.contains("patch-review")){const e=document.getElementById("review-submit").dataset.reviewId;m(e,t,a)}else{const e=document.getElementById("review-submit").dataset.tourId;u(e,t,a)}}))}D&&D.addEventListener("click",(e=>{const t=e.target.dataset.tourId,a=!!e.target.classList.contains("bookmarked");p(t,a,e)}));
//# sourceMappingURL=index.js.map
